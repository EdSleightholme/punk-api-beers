{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport var fetchAllBeers = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", fetch(\" https://api.punkapi.com/v2/beers\", {\n              method: \"GET\"\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data.map(function (beer) {\n                return {\n                  abv: beer.abv,\n                  description: beer.description,\n                  food_pairing: beer.food_pairing,\n                  image_url: beer.image_url,\n                  name: beer.name,\n                  tagline: beer.tagline\n                };\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchAllBeers() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/CCNCH/Documents/Coding Tests/punk-api-beers/pages/api_caller.js"],"names":["fetchAllBeers","fetch","method","then","response","json","data","map","beer","abv","description","food_pairing","image_url","name","tagline"],"mappings":";;;;AACA,OAAO,IAAMA,aAAa;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,6CACpBC,KAAK,CACV,mCADU,EAEV;AACEC,cAAAA,MAAM,EAAE;AADV,aAFU,CAAL,CAOJC,IAPI,CAOC,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,aAPD,EAQJF,IARI,CAQC,UAACG,IAAD,EAAU;AACd,qBAAOA,IAAI,CAACC,GAAL,CAAS,UAAAC,IAAI,EAAI;AAAC,uBAAM;AAC7BC,kBAAAA,GAAG,EAAED,IAAI,CAACC,GADmB;AAE7BC,kBAAAA,WAAW,EAAEF,IAAI,CAACE,WAFW;AAG7BC,kBAAAA,YAAY,EAAEH,IAAI,CAACG,YAHU;AAI7BC,kBAAAA,SAAS,EAACJ,IAAI,CAACI,SAJc;AAK7BC,kBAAAA,IAAI,EAACL,IAAI,CAACK,IALmB;AAM7BC,kBAAAA,OAAO,EAACN,IAAI,CAACM;AANgB,iBAAN;AAOtB,eAPI,CAAP;AAQD,aAjBI,CADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbd,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["\r\nexport const fetchAllBeers = async () => {\r\n  return fetch(\r\n    \" https://api.punkapi.com/v2/beers\",\r\n    {\r\n      method: \"GET\",\r\n    }\r\n\r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.map(beer => {return{ \r\n        abv: beer.abv, \r\n        description: beer.description, \r\n        food_pairing: beer.food_pairing,\r\n        image_url:beer.image_url,\r\n        name:beer.name,\r\n        tagline:beer.tagline\r\n       }})\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}